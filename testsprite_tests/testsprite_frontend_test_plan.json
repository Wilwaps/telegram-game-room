[
  {
    "id": "TC001",
    "title": "Tic Tac Toe Real-Time Gameplay Synchronization",
    "description": "Verify that two players can play Tic Tac Toe in real-time with correct move synchronization, turn enforcement, and game state updates.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Player A creates a Tic Tac Toe game room and waits for Player B."
      },
      {
        "type": "action",
        "description": "Player B joins the same game room."
      },
      {
        "type": "action",
        "description": "Player A makes the first move on the board."
      },
      {
        "type": "assertion",
        "description": "Player B sees Player A's move reflected immediately and is notified that it’s their turn."
      },
      {
        "type": "action",
        "description": "Player B makes their move."
      },
      {
        "type": "assertion",
        "description": "Player A sees Player B's move reflected immediately and is notified that it’s their turn."
      },
      {
        "type": "action",
        "description": "Players alternate moves until game ends with win, loss, or draw."
      },
      {
        "type": "assertion",
        "description": "All moves are synchronized correctly without delay or desynchronization; final game result is shown to both players."
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Game Room Creation and Joining with Public and Private Access",
    "description": "Validate creation of public and private game rooms, joining via room code or invitation link, and access control enforcement.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User creates a public Tic Tac Toe room."
      },
      {
        "type": "assertion",
        "description": "Room is created and visible for joining without invitation."
      },
      {
        "type": "action",
        "description": "User creates a private room and copies the invite code."
      },
      {
        "type": "assertion",
        "description": "Room is created but not visible publicly."
      },
      {
        "type": "action",
        "description": "Another user attempts to join private room without code."
      },
      {
        "type": "assertion",
        "description": "Access is denied due to missing or invalid invite code."
      },
      {
        "type": "action",
        "description": "User joins private room using valid invite code."
      },
      {
        "type": "assertion",
        "description": "User is allowed to join the private room."
      },
      {
        "type": "action",
        "description": "User invites friends via Telegram link to join room."
      },
      {
        "type": "assertion",
        "description": "Friends receive the invite link and can join the room by clicking the link."
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Host Transfer and Rematch Functionality in Game Rooms",
    "description": "Ensure host transfer between players and rematch requests operate correctly with state updates and notification.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Host player initiates host transfer to another player in the room."
      },
      {
        "type": "assertion",
        "description": "Host role is transferred and new host receives full host permissions."
      },
      {
        "type": "action",
        "description": "Non-host player attempts to initiate host transfer."
      },
      {
        "type": "assertion",
        "description": "Action is denied due to insufficient permissions."
      },
      {
        "type": "action",
        "description": "Players finish a game and a player requests a rematch."
      },
      {
        "type": "assertion",
        "description": "Rematch request is sent and accepted; game resets and starts anew with correct roles and state."
      },
      {
        "type": "action",
        "description": "Player rejects rematch request."
      },
      {
        "type": "assertion",
        "description": "Rematch does not start; players can choose to exit or stay in the room."
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Economy: Supply, Sponsor, and Transfer API Operations",
    "description": "Validate the Economy APIs for supply summary, sponsor management, and fire transfers including error handling and administrative restrictions.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Perform GET request to /api/economy/supply and validate response contains correct supply summary."
      },
      {
        "type": "assertion",
        "description": "Supply summary data is accurate and complete."
      },
      {
        "type": "action",
        "description": "Perform GET request to /api/economy/sponsors and verify list of sponsors is returned."
      },
      {
        "type": "assertion",
        "description": "Response includes all active sponsors with their metadata."
      },
      {
        "type": "action",
        "description": "As admin, POST to /api/economy/sponsors/add with valid sponsor data."
      },
      {
        "type": "assertion",
        "description": "Sponsor is successfully added and visible in the sponsor list."
      },
      {
        "type": "action",
        "description": "As non-admin user, attempt to add sponsor."
      },
      {
        "type": "assertion",
        "description": "Action is denied with appropriate permission error."
      },
      {
        "type": "action",
        "description": "Perform POST to /api/economy/transfer to transfer fires from sponsor to user with valid sponsorKey."
      },
      {
        "type": "assertion",
        "description": "Transfer completes successfully and balances update accordingly."
      },
      {
        "type": "action",
        "description": "Attempt fire transfer with invalid sponsorKey or insufficient balance."
      },
      {
        "type": "assertion",
        "description": "Transfer fails with clear error message and no balance change."
      },
      {
        "type": "action",
        "description": "As admin, grant fires from reserve via /api/economy/grant-from-supply."
      },
      {
        "type": "assertion",
        "description": "Fire grant occurs and user balance is updated appropriately."
      }
    ]
  },
  {
    "id": "TC005",
    "title": "User Profile Read, Update and Key Change Request",
    "description": "Verify user profile retrieval, update operations and the request key change API including validation and error scenarios.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "GET user profile via /api/profile/{userId} with valid userId."
      },
      {
        "type": "assertion",
        "description": "Correct user profile data is returned."
      },
      {
        "type": "action",
        "description": "POST update to /api/profile/{userId} with valid updated firstName, lastName, phone, and email."
      },
      {
        "type": "assertion",
        "description": "Profile is updated successfully and changes are reflected in subsequent GET requests."
      },
      {
        "type": "action",
        "description": "POST update with invalid email format."
      },
      {
        "type": "assertion",
        "description": "API responds with validation error and profile is not updated."
      },
      {
        "type": "action",
        "description": "POST to /api/profile/{userId}/request-key-change with valid newKey and optional note."
      },
      {
        "type": "assertion",
        "description": "Key change request is accepted and queued for processing."
      },
      {
        "type": "action",
        "description": "POST key change request with missing newKey."
      },
      {
        "type": "assertion",
        "description": "Request is rejected with descriptive validation error."
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Store Catalog Retrieval and Item Redemption",
    "description": "Test retrieval of the store catalog and redemption of items using 'Fuegos' currency with balance and request validation.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "GET catalog from /api/store/catalog endpoint."
      },
      {
        "type": "assertion",
        "description": "Complete catalog with all available items is returned."
      },
      {
        "type": "action",
        "description": "POST redemption request to /api/store/redeem with valid userId and itemId when user has sufficient fires."
      },
      {
        "type": "assertion",
        "description": "Redemption is successful, user's fires balance is updated accordingly."
      },
      {
        "type": "action",
        "description": "POST redemption request with insufficient fires balance."
      },
      {
        "type": "assertion",
        "description": "Redemption fails with appropriate error and no balance deduction."
      },
      {
        "type": "action",
        "description": "POST redemption request with invalid or missing userId or itemId."
      },
      {
        "type": "assertion",
        "description": "Request is rejected with validation error."
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Socket.io Connection Stability and Reconnection Handling",
    "description": "Verify that the real-time connection via Socket.io remains stable during gameplay, including automatic reconnection on temporary network failures.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Connect two players to the same game room using Socket.io."
      },
      {
        "type": "assertion",
        "description": "Both players have active sockets and can send/receive moves."
      },
      {
        "type": "action",
        "description": "Simulate network interruption on one player's client."
      },
      {
        "type": "assertion",
        "description": "Socket.io automatically attempts to reconnect without losing game state."
      },
      {
        "type": "action",
        "description": "Network is restored on the interrupted client."
      },
      {
        "type": "assertion",
        "description": "Client reconnects successfully and receives the current game state without desynchronization."
      },
      {
        "type": "action",
        "description": "Game continues normally after reconnection."
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Security: Rate Limiting, Sanitization, and Authorization Enforcement",
    "description": "Ensure API endpoints implement rate limiting, input sanitization and validation, and enforce role-based access control properly.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Make a large number of requests rapidly to key APIs (e.g., economy transfer, profile update) to test rate limiting."
      },
      {
        "type": "assertion",
        "description": "Requests exceeding the rate limit are rejected with correct HTTP status and informative message."
      },
      {
        "type": "action",
        "description": "Submit malicious or malformed input (e.g., script tags, SQL injection patterns) to profile and economy endpoints."
      },
      {
        "type": "assertion",
        "description": "Inputs are sanitized; no injection occurs; API responds with validation errors where appropriate."
      },
      {
        "type": "action",
        "description": "Attempt restricted admin actions such as adding sponsors or granting fires using non-admin credentials."
      },
      {
        "type": "assertion",
        "description": "Access is denied for unauthorized users with appropriate error messages."
      }
    ]
  },
  {
    "id": "TC009",
    "title": "User Interface Responsiveness and Feedback on Telegram WebApp",
    "description": "Verify that the MiniApp UI is responsive across devices and screen sizes and that animations, Telegram WebApp SDK integration, and haptic feedback are properly implemented.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open the MiniApp on desktop, tablet, and mobile devices."
      },
      {
        "type": "assertion",
        "description": "UI scales and rearranges correctly without overlap or cutoff."
      },
      {
        "type": "action",
        "description": "Perform game moves and room management actions."
      },
      {
        "type": "assertion",
        "description": "Animations run smoothly; state transitions are visually clear."
      },
      {
        "type": "action",
        "description": "Trigger UI events such as button presses and notifications."
      },
      {
        "type": "assertion",
        "description": "Haptic feedback (if available on device) activates correctly, and Telegram WebApp SDK integration reflects in interface behavior."
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Scalability: Handling Multiple Simultaneous Game Rooms and Players",
    "description": "Test the system under load with multiple concurrent game rooms and players to verify Redis handling, socket connections, and consistent room state management.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Simulate creation of dozens of concurrent Tic Tac Toe game rooms with multiple players each."
      },
      {
        "type": "assertion",
        "description": "All rooms maintain accurate and independent game states without interference."
      },
      {
        "type": "action",
        "description": "Perform simultaneous moves and room events in multiple rooms."
      },
      {
        "type": "assertion",
        "description": "No state collisions occur; Redis operations and socket event handling remain consistent."
      },
      {
        "type": "action",
        "description": "Monitor server logs and performance metrics during load."
      },
      {
        "type": "assertion",
        "description": "System handles load without crashes, memory leaks, or major latency spikes."
      }
    ]
  }
]
