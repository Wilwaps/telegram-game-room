[
  {
    "id": "TC001",
    "title": "Real-time Tic Tac Toe game synchronization",
    "description": "Verify that Tic Tac Toe games synchronize moves correctly in real-time between two or more players using Socket.io, reflecting game state and turn changes instantly.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Player A creates a new Tic Tac Toe game room."
      },
      {
        "type": "action",
        "description": "Player B joins the same game room."
      },
      {
        "type": "action",
        "description": "Player A places their mark on an empty cell."
      },
      {
        "type": "assertion",
        "description": "Verify Player B's interface updates immediately to show Player A's move."
      },
      {
        "type": "action",
        "description": "Player B places their mark on another cell."
      },
      {
        "type": "assertion",
        "description": "Verify Player A sees Player B's move in real-time."
      },
      {
        "type": "action",
        "description": "Continue playing until the game reaches a conclusion (win, lose, or draw)."
      },
      {
        "type": "assertion",
        "description": "Confirm final game state and result is synchronized for all players."
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Game lobby management: creation and joining rooms",
    "description": "Validate that users can create public and private game rooms, join existing rooms by code, and that invitations and host transfers work as specified.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User creates a public game room."
      },
      {
        "type": "assertion",
        "description": "Confirm room is listed as public and accessible by other users."
      },
      {
        "type": "action",
        "description": "User creates a private room."
      },
      {
        "type": "assertion",
        "description": "Confirm private room requires invitation code or link to join."
      },
      {
        "type": "action",
        "description": "Another user attempts to join private room without code."
      },
      {
        "type": "assertion",
        "description": "Confirm join is denied."
      },
      {
        "type": "action",
        "description": "User invites a friend by code/link to a private room."
      },
      {
        "type": "action",
        "description": "Friend joins using invitation code/link."
      },
      {
        "type": "assertion",
        "description": "Confirm user successfully joins the private room."
      },
      {
        "type": "action",
        "description": "Host transfers room leadership to another player."
      },
      {
        "type": "assertion",
        "description": "Confirm new host is set correctly and controls game flow."
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Economy system: fires supply retrieval and real-time updates",
    "description": "Ensure users and admins can retrieve current fires supply, transaction history, and receive real-time fires supply updates via SSE.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Admin requests the current fires supply summary via GET /api/economy/supply."
      },
      {
        "type": "assertion",
        "description": "Verify response contains accurate current supply data."
      },
      {
        "type": "action",
        "description": "Admin or user subscribes to fires supply SSE stream via GET /api/economy/supply/stream."
      },
      {
        "type": "assertion",
        "description": "Verify SSE stream receives live updates on supply changes."
      },
      {
        "type": "action",
        "description": "Perform a supply transaction (grant or use some fires)."
      },
      {
        "type": "assertion",
        "description": "Confirm SSE stream notifies subscribers of updated supply and transaction details."
      },
      {
        "type": "action",
        "description": "User fetches supply transaction history with pagination parameters."
      },
      {
        "type": "assertion",
        "description": "Verify response includes correct transaction list respecting limits."
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Economy system: fires transfer by sponsors",
    "description": "Validate the transfer of fires from sponsor to users with correct authentication and error handling.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Sponsor attempts to transfer fires to a user with valid sponsor key and correct payload."
      },
      {
        "type": "assertion",
        "description": "Verify the transfer succeeds and user fires balance increases accordingly."
      },
      {
        "type": "action",
        "description": "Sponsor tries transfer with invalid sponsor key."
      },
      {
        "type": "assertion",
        "description": "Verify transfer is rejected with appropriate error message."
      },
      {
        "type": "action",
        "description": "Sponsor attempts transfer exceeding their allowed balance."
      },
      {
        "type": "assertion",
        "description": "Verify transfer is denied due to insufficient funds."
      },
      {
        "type": "action",
        "description": "Sponsor sends incomplete request missing required fields."
      },
      {
        "type": "assertion",
        "description": "Verify server rejects request with validation errors."
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Item redemption in store using fires",
    "description": "Confirm users can view catalog and redeem items if they have enough fires balance; also validate error handling for insufficient balance and invalid items.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User fetches item catalog via GET /api/store/catalog."
      },
      {
        "type": "assertion",
        "description": "Verify catalog returns list of items with valid fields."
      },
      {
        "type": "action",
        "description": "User redeems an item with sufficient fires balance."
      },
      {
        "type": "assertion",
        "description": "Confirm redemption success and fires balance decrease reflected."
      },
      {
        "type": "action",
        "description": "User tries to redeem an item with insufficient fires."
      },
      {
        "type": "assertion",
        "description": "Verify redemption is denied with correct error message."
      },
      {
        "type": "action",
        "description": "User submits redemption request with invalid or non-existent item ID."
      },
      {
        "type": "assertion",
        "description": "Ensure server responds with appropriate validation error."
      }
    ]
  },
  {
    "id": "TC006",
    "title": "User profile retrieve and update",
    "description": "Validate that user profiles can be retrieved and updated correctly, with proper validation on input data.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Retrieve user profile data using GET /api/profile/{userId}."
      },
      {
        "type": "assertion",
        "description": "Verify profile data is returned and matches expected user information."
      },
      {
        "type": "action",
        "description": "Update user profile fields (name, email, phone) with valid data."
      },
      {
        "type": "assertion",
        "description": "Confirm update success and data stored correctly."
      },
      {
        "type": "action",
        "description": "Attempt profile update with invalid email format."
      },
      {
        "type": "assertion",
        "description": "Verify validation error prevents update."
      }
    ]
  },
  {
    "id": "TC007",
    "title": "XP thresholds retrieval and update",
    "description": "Test retrieval and all aspects of XPs threshold configuration API for correct functioning and validation.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Retrieve current XP thresholds via GET /api/xp/config."
      },
      {
        "type": "assertion",
        "description": "Verify response returns valid XP threshold configuration."
      },
      {
        "type": "action",
        "description": "Update XP thresholds with valid new threshold data via POST /api/xp/config."
      },
      {
        "type": "assertion",
        "description": "Confirm update success and new thresholds are applied."
      },
      {
        "type": "action",
        "description": "Attempt to update XP thresholds with invalid or incomplete data."
      },
      {
        "type": "assertion",
        "description": "Verify server rejects request with appropriate validation errors."
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Sponsor management (admin only): add, remove, update metadata and keys",
    "description": "Verify that admin APIs to add sponsors, remove sponsors, update sponsor metadata, set sponsor keys, and remove keys behave correctly and enforce authorization.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Admin adds a new sponsor with all required fields."
      },
      {
        "type": "assertion",
        "description": "Confirm sponsor is added successfully and visible in sponsors list."
      },
      {
        "type": "action",
        "description": "Admin attempts to add sponsor with missing required fields."
      },
      {
        "type": "assertion",
        "description": "Verify server returns validation errors."
      },
      {
        "type": "action",
        "description": "Admin removes a sponsor by userId."
      },
      {
        "type": "assertion",
        "description": "Confirm sponsor is no longer in the sponsors list."
      },
      {
        "type": "action",
        "description": "Admin updates sponsor metadata description."
      },
      {
        "type": "assertion",
        "description": "Verify metadata is updated correctly."
      },
      {
        "type": "action",
        "description": "Admin sets a sponsor key."
      },
      {
        "type": "assertion",
        "description": "Verify key is set and required for transfers."
      },
      {
        "type": "action",
        "description": "Admin removes a sponsor key."
      },
      {
        "type": "assertion",
        "description": "Verify key removal success."
      },
      {
        "type": "action",
        "description": "Non-admin user attempts to call any sponsor management API."
      },
      {
        "type": "assertion",
        "description": "Verify request is rejected with authorization error."
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Error handling and security: rate limiting and input validation",
    "description": "Confirm that the system enforces rate limiting and sanitizes inputs properly across APIs to prevent abuse and injection attacks.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send rapid repeated requests to an API endpoint exceeding rate limit thresholds."
      },
      {
        "type": "assertion",
        "description": "Confirm server responds with rate limit error after threshold is reached."
      },
      {
        "type": "action",
        "description": "Send API request with malicious input payload (e.g., script tags, SQL injection patterns)."
      },
      {
        "type": "assertion",
        "description": "Verify input is sanitized and no harmful execution occurs; server returns validation errors if applicable."
      },
      {
        "type": "action",
        "description": "Attempt to perform unauthorized actions (like modifying another user's data) without proper credentials."
      },
      {
        "type": "assertion",
        "description": "Confirm access is denied and proper error codes are returned."
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Telegram WebApp SDK integration & UI responsiveness",
    "description": "Test that the MiniApp integrates correctly with Telegram WebApp SDK environment, supports responsive UI layouts, and provides visual and haptic feedback as specified.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Launch MiniApp from Telegram bot using WebApp SDK."
      },
      {
        "type": "assertion",
        "description": "Verify the MiniApp loads within Telegram interface without errors."
      },
      {
        "type": "action",
        "description": "Resize the application window to various sizes representing mobile and desktop views."
      },
      {
        "type": "assertion",
        "description": "Confirm UI components reorganize and scale correctly."
      },
      {
        "type": "action",
        "description": "Perform game actions and store interactions."
      },
      {
        "type": "assertion",
        "description": "Verify visual feedback animations and haptic feedback trigger appropriately."
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Re-match flow and game exit behavior",
    "description": "Validate the behavior of requesting a re-match after a game has finished, including cancelling, host controls, and clean exit from the game room.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Complete a Tic Tac Toe game until result is shown."
      },
      {
        "type": "action",
        "description": "User requests a re-match."
      },
      {
        "type": "assertion",
        "description": "Confirm rematch invitation is sent and UI updates accordingly."
      },
      {
        "type": "action",
        "description": "Opponent accepts the re-match."
      },
      {
        "type": "assertion",
        "description": "Verify new game room is established and players can start immediately."
      },
      {
        "type": "action",
        "description": "User cancels the re-match request before opponent accepts."
      },
      {
        "type": "assertion",
        "description": "Confirm cancellation propagates and UI returns to stable state."
      },
      {
        "type": "action",
        "description": "User exits the game room."
      },
      {
        "type": "assertion",
        "description": "Verify user is removed from the room and connection is closed cleanly."
      }
    ]
  }
]
