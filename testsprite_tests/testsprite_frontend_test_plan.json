[
  {
    "id": "TC001",
    "title": "Real-time multiplayer Tic Tac Toe game play",
    "description": "Verify that two or more users can create or join a Tic Tac Toe room and play a synchronized game in real time using Socket.io with minimal latency and correct state synchronization.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User A opens the Telegram MiniApp and creates a new Tic Tac Toe game room"
      },
      {
        "type": "action",
        "description": "User B joins the created game room via invitation code"
      },
      {
        "type": "action",
        "description": "Users take turns making valid moves on the Tic Tac Toe board"
      },
      {
        "type": "assertion",
        "description": "Verify moves are propagated instantly to all players' clients and displayed correctly"
      },
      {
        "type": "action",
        "description": "User A wins or the game ends in a draw"
      },
      {
        "type": "assertion",
        "description": "Verify the game result is correctly shown to all players simultaneously"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Room creation and joining flow",
    "description": "Test that users can create public and private game rooms, and other users can join rooms using invitation codes or Telegram invitations.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User creates a public game room"
      },
      {
        "type": "assertion",
        "description": "Verify the room is listed in the public rooms list for other users"
      },
      {
        "type": "action",
        "description": "User creates a private game room"
      },
      {
        "type": "assertion",
        "description": "Verify the room is not visible in the public listing but has a sharable invitation code"
      },
      {
        "type": "action",
        "description": "Another user joins the private room via the invitation code"
      },
      {
        "type": "assertion",
        "description": "Verify the user joins the room successfully"
      },
      {
        "type": "action",
        "description": "Another user attempts to join private room without an invitation code"
      },
      {
        "type": "assertion",
        "description": "Verify the user is denied access"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Fuegos virtual currency transactions consistency",
    "description": "Validate that transaction of virtual currency 'Fuegos' are reflected correctly in user balances and transaction histories without inconsistencies or losses.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User A earns Fuegos by winning a game"
      },
      {
        "type": "assertion",
        "description": "Verify User A's Fuegos balance increases accordingly"
      },
      {
        "type": "action",
        "description": "User A transfers Fuegos to User B through Economy API"
      },
      {
        "type": "assertion",
        "description": "Verify User A's balance decreases and User B's balance increases by the transferred amount"
      },
      {
        "type": "action",
        "description": "Query transaction history for User A and User B"
      },
      {
        "type": "assertion",
        "description": "Verify transactions appear with correct details and timestamps"
      },
      {
        "type": "action",
        "description": "Attempt to transfer more Fuegos than available in User A's balance"
      },
      {
        "type": "assertion",
        "description": "Verify transfer is rejected with appropriate error"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Store catalog retrieval and item redemption",
    "description": "Ensure users can retrieve the items catalog from the Store API and redeem items using their available Fuegos balance properly.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User requests the catalog from /api/store/catalog"
      },
      {
        "type": "assertion",
        "description": "Verify the catalog is returned successfully with valid item details"
      },
      {
        "type": "action",
        "description": "User redeems an item with sufficient Fuegos balance"
      },
      {
        "type": "assertion",
        "description": "Verify the redemption request succeeds and user's Fuegos balance decreases accordingly"
      },
      {
        "type": "action",
        "description": "User attempts to redeem an item without sufficient Fuegos"
      },
      {
        "type": "assertion",
        "description": "Verify redemption is rejected due to insufficient balance"
      },
      {
        "type": "action",
        "description": "User attempts to redeem an invalid or non-existent item"
      },
      {
        "type": "assertion",
        "description": "Verify redemption request is rejected with appropriate error"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "User profile view, update, and key change request",
    "description": "Validate the profile API endpoints for retrieving user profiles, updating profile data, and submitting key change requests.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Request profile data for a valid userId via GET /api/profile/{userId}"
      },
      {
        "type": "assertion",
        "description": "Verify the correct user profile data is returned"
      },
      {
        "type": "action",
        "description": "Update profile data (e.g. firstName, lastName, phone, email) via POST /api/profile/{userId}"
      },
      {
        "type": "assertion",
        "description": "Verify the profile update is persisted correctly by subsequent GET"
      },
      {
        "type": "action",
        "description": "Request a key change via POST /api/profile/{userId}/request-key-change with newKey"
      },
      {
        "type": "assertion",
        "description": "Verify the key change request is accepted and logged"
      },
      {
        "type": "action",
        "description": "Request profile for invalid or non-existing userId"
      },
      {
        "type": "assertion",
        "description": "Verify API returns a 404 or appropriate error"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Administration of sponsors and economy management",
    "description": "Confirm that administrative operations for managing sponsors and Fuegos supply are properly authorized and produce expected results.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt sponsor addition without admin authorization"
      },
      {
        "type": "assertion",
        "description": "Verify the request is rejected with authorization error"
      },
      {
        "type": "action",
        "description": "Admin adds a sponsor with userId, key, description, and initial amount"
      },
      {
        "type": "assertion",
        "description": "Verify sponsor is added and listed in sponsors"
      },
      {
        "type": "action",
        "description": "Admin updates sponsor meta data and keys"
      },
      {
        "type": "assertion",
        "description": "Verify updates are reflected correctly"
      },
      {
        "type": "action",
        "description": "Sponsor transfers Fuegos to users using sponsor key"
      },
      {
        "type": "assertion",
        "description": "Verify transfer succeeds only with valid sponsor key and updates balances"
      },
      {
        "type": "action",
        "description": "Admin grants Fuegos from supply reserve to users"
      },
      {
        "type": "assertion",
        "description": "Verify grant operation updates user balances and supply correctly"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "XP API threshold configuration",
    "description": "Ensure XP thresholds can be retrieved and updated correctly via the XP API.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Get current XP thresholds via GET /api/xp/config"
      },
      {
        "type": "assertion",
        "description": "Verify the current thresholds data is returned successfully"
      },
      {
        "type": "action",
        "description": "Post new XP thresholds data via POST /api/xp/config"
      },
      {
        "type": "assertion",
        "description": "Verify the thresholds are updated and reflected on subsequent GET"
      },
      {
        "type": "action",
        "description": "Post malformed XP thresholds data"
      },
      {
        "type": "assertion",
        "description": "Verify the API rejects the request with validation error"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "System robustness: host removal and game continuity",
    "description": "Validate that if the host user leaves a game room, the system correctly transfers host privileges and the game continues without interruption.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User A is the host in a multiplayer game room; initiate gameplay"
      },
      {
        "type": "action",
        "description": "User A leaves the game room unexpectedly"
      },
      {
        "type": "assertion",
        "description": "Verify host role is transferred to another player automatically"
      },
      {
        "type": "assertion",
        "description": "Verify the game state continues synchronized with remaining players without errors"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Multiple game rounds (revancha) without reload",
    "description": "Test the ability to start multiple consecutive game rounds in the same room without requiring page reload or exit, including score reset and synchronization.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Start a Tic Tac Toe game round and play to completion"
      },
      {
        "type": "action",
        "description": "Initiate revancha (rematch) from within the room"
      },
      {
        "type": "assertion",
        "description": "Verify the board resets and players are synchronized for the new round instantly"
      },
      {
        "type": "action",
        "description": "Play multiple consecutive rounds without leaving the room"
      },
      {
        "type": "assertion",
        "description": "Verify no errors occur, states remain consistent and scores update if applicable"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "API pagination, filtering and error handling",
    "description": "Validate that API endpoints supporting pagination and filtering behave correctly and handle invalid parameters gracefully.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Request users list with pagination parameters limit and cursor from /api/economy/users"
      },
      {
        "type": "assertion",
        "description": "Verify list is paginated and next cursor provided if applicable"
      },
      {
        "type": "action",
        "description": "Perform search filtering on users list with valid search query"
      },
      {
        "type": "assertion",
        "description": "Verify filtered results match the query"
      },
      {
        "type": "action",
        "description": "Request user fires history with limit and offset parameters"
      },
      {
        "type": "assertion",
        "description": "Verify correct subset of history entries is returned"
      },
      {
        "type": "action",
        "description": "Send API requests with invalid or malformed parameters"
      },
      {
        "type": "assertion",
        "description": "Verify APIs return appropriate 4xx error responses with clear messages"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "UI responsiveness and cross-device compatibility",
    "description": "Confirm that the frontend UI adapts correctly to different screen sizes and resolutions on both desktop and mobile devices within Telegram WebApp SDK.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open the MiniApp on desktop with various window sizes"
      },
      {
        "type": "assertion",
        "description": "Verify UI components adjust layout appropriately without overflow or clipping"
      },
      {
        "type": "action",
        "description": "Open the MiniApp on mobile devices with different screen resolutions (iOS and Android)"
      },
      {
        "type": "assertion",
        "description": "Verify touch controls are usable, text is readable and interface fits the screen"
      },
      {
        "type": "action",
        "description": "Verify smooth interaction with realtime gameplay and store features"
      },
      {
        "type": "assertion",
        "description": "Verify no UI glitches or freezes during usage in Telegram WebApp context"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Operational logging and error monitoring",
    "description": "Validate that the system logs important operations, errors, and warnings for monitoring and troubleshooting.",
    "category": "functional",
    "priority": "Low",
    "steps": [
      {
        "type": "action",
        "description": "Trigger typical user actions including game plays, economy transactions, profile updates, and admin operations"
      },
      {
        "type": "assertion",
        "description": "Verify that logs capture the events, with timestamps, user IDs, and relevant details"
      },
      {
        "type": "action",
        "description": "Force error conditions such as invalid API calls and socket disconnections"
      },
      {
        "type": "assertion",
        "description": "Verify errors are logged with stack traces or error descriptions"
      },
      {
        "type": "action",
        "description": "Inspect log retention and accessibility on the backend"
      },
      {
        "type": "assertion",
        "description": "Verify logs are stored securely and searchable for operational use"
      }
    ]
  }
]
