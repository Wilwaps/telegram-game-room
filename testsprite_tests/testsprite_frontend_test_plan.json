[
  {
    "id": "TC001",
    "title": "Real-time Tic Tac Toe Game Play",
    "description": "Verify real-time synchronization and game flow for Tic Tac Toe using Socket.io between multiple players.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User A creates a public Tic Tac Toe game room"
      },
      {
        "type": "action",
        "description": "User B joins the created game room"
      },
      {
        "type": "action",
        "description": "User A makes a valid move in the game"
      },
      {
        "type": "assertion",
        "description": "User B sees the move in real-time without delay"
      },
      {
        "type": "action",
        "description": "User B makes a move"
      },
      {
        "type": "assertion",
        "description": "User A sees User B's move in real-time"
      },
      {
        "type": "action",
        "description": "Users play until a win or draw condition is met"
      },
      {
        "type": "assertion",
        "description": "Game correctly identifies win, draw or ongoing state"
      },
      {
        "type": "action",
        "description": "User requests a rematch"
      },
      {
        "type": "assertion",
        "description": "Both users are able to start a rematch successfully with reset board"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Game Room Management - Creation, Joining, Invitations, and Host Transfer",
    "description": "Test creation of public and private rooms, joining by code/link, sending invitations, and transferring host rights.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User creates a private game room"
      },
      {
        "type": "assertion",
        "description": "Room is created with private access code"
      },
      {
        "type": "action",
        "description": "User shares invite link or code via Telegram"
      },
      {
        "type": "action",
        "description": "Another user joins using invite code or link"
      },
      {
        "type": "assertion",
        "description": "Joining user enters room successfully and is listed as participant"
      },
      {
        "type": "action",
        "description": "Current host transfers host rights to joined user"
      },
      {
        "type": "assertion",
        "description": "Host rights are correctly transferred and both users see updated host info"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Economy System - Supply and Sponsor Management",
    "description": "Verify supply summary retrieval and sponsor listing, adding, modifying, and removing sponsors via Economy API with admin authorization.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Call GET /api/economy/supply and validate status 200 and correct summary data"
      },
      {
        "type": "action",
        "description": "Call GET /api/economy/sponsors and validate sponsor list is retrieved"
      },
      {
        "type": "action",
        "description": "As admin, add a new sponsor via POST /api/economy/sponsors/add with valid data"
      },
      {
        "type": "assertion",
        "description": "New sponsor appears in sponsor list"
      },
      {
        "type": "action",
        "description": "As admin, update sponsor meta data and key"
      },
      {
        "type": "assertion",
        "description": "Sponsor metadata and key updates are persisted"
      },
      {
        "type": "action",
        "description": "As admin, remove sponsor and verify removal"
      },
      {
        "type": "assertion",
        "description": "Sponsor no longer appears in sponsors list"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Economy System - Transfer and Grant Fires Transactions",
    "description": "Validate transfer of virtual currency 'Fuegos' between users with and without sponsor authorization and admin granting from reserve.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Perform POST /api/economy/transfer with valid sponsor key and transfer parameters"
      },
      {
        "type": "assertion",
        "description": "Transfer succeeds and user balances update accordingly"
      },
      {
        "type": "action",
        "description": "Attempt transfer without sponsor key or insufficient permissions"
      },
      {
        "type": "assertion",
        "description": "Transfer fails with appropriate error message"
      },
      {
        "type": "action",
        "description": "Admin performs POST /api/economy/grant-from-supply to grant fires from reserve"
      },
      {
        "type": "assertion",
        "description": "Grant succeeds and recipient balance increases accordingly"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "User Economy Data Streaming via SSE",
    "description": "Verify clients receive real-time updates of supply changes via Server-Sent Events (SSE) endpoint.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Client subscribes to /api/economy/supply/stream SSE endpoint"
      },
      {
        "type": "action",
        "description": "Trigger supply changes via transfers or grants"
      },
      {
        "type": "assertion",
        "description": "Client receives all relevant supply update events in real time"
      },
      {
        "type": "action",
        "description": "Simulate SSE connection drop and reconnect"
      },
      {
        "type": "assertion",
        "description": "Client successfully re-subscribes and receives missed events if supported"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Store Catalog and Redeem Item Functionality",
    "description": "Validate retrieval of store catalog and successful redemption of items using Fuegos, including error handling for insufficient funds or invalid item ID.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Call GET /api/store/catalog and verify catalog data retrieval"
      },
      {
        "type": "action",
        "description": "Redeem a valid item via POST /api/store/redeem with correct userId and itemId"
      },
      {
        "type": "assertion",
        "description": "User's Fuegos balance decreases accordingly and redemption is confirmed"
      },
      {
        "type": "action",
        "description": "Attempt to redeem item with insufficient Fuegos balance"
      },
      {
        "type": "assertion",
        "description": "Redemption fails with appropriate error message"
      },
      {
        "type": "action",
        "description": "Attempt to redeem with invalid or missing itemId"
      },
      {
        "type": "assertion",
        "description": "API returns validation error"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "User Profile Management",
    "description": "Verify retrieval and update of user profile information and requesting key change via Profile API.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Call GET /api/profile/{userId} to retrieve user profile"
      },
      {
        "type": "assertion",
        "description": "Profile data returned matches stored information"
      },
      {
        "type": "action",
        "description": "Update user's profile data with valid changes via POST /api/profile/{userId}"
      },
      {
        "type": "assertion",
        "description": "Profile data updates are persisted and returned correctly on retrieval"
      },
      {
        "type": "action",
        "description": "Request key change with valid newKey via POST /api/profile/{userId}/request-key-change"
      },
      {
        "type": "assertion",
        "description": "Key change request is accepted and confirmation is returned"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "XP Threshold Configuration and Retrieval",
    "description": "Test retrieval and update of XP thresholds for user progression management through the XP API.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Call GET /api/xp/config to retrieve current XP thresholds"
      },
      {
        "type": "assertion",
        "description": "XP thresholds fit expected schema and values"
      },
      {
        "type": "action",
        "description": "Update XP thresholds with a valid configuration via POST /api/xp/config"
      },
      {
        "type": "assertion",
        "description": "Update accepted and new thresholds are persisted"
      },
      {
        "type": "action",
        "description": "Attempt updating with invalid payload (e.g. missing required fields or malformed data)"
      },
      {
        "type": "assertion",
        "description": "API rejects request with appropriate error"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Security - Rate Limiting and Input Validation",
    "description": "Verify that API rate limiting works as expected and that invalid or malicious inputs are properly sanitized and rejected.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send rapid multiple requests exceeding rate limits to protected endpoints"
      },
      {
        "type": "assertion",
        "description": "Server responds with 429 Too Many Requests or similar status"
      },
      {
        "type": "action",
        "description": "Send requests with SQL injection, XSS payloads or malformed inputs to APIs"
      },
      {
        "type": "assertion",
        "description": "Inputs are sanitized or rejected, no database or application errors occur"
      },
      {
        "type": "action",
        "description": "Verify Helmet middleware sets appropriate security headers on responses"
      },
      {
        "type": "assertion",
        "description": "Security headers (e.g. Content-Security-Policy, X-Frame-Options) are present"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "UI/UX Responsiveness and Telegram WebApp SDK Integration",
    "description": "Test the MiniApp UI responsiveness across screen sizes, and verify integration with Telegram WebApp SDK including haptic feedback and animations.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open MiniApp in Telegram WebApp environment on different device sizes"
      },
      {
        "type": "assertion",
        "description": "UI adapts responsively without layout breakage or clipping"
      },
      {
        "type": "action",
        "description": "Perform game actions that trigger animations and feedback"
      },
      {
        "type": "assertion",
        "description": "Animations play smoothly and haptic feedback triggers on supported devices"
      },
      {
        "type": "action",
        "description": "Test Telegram bot commands and menu buttons related to MiniApp launch and navigation"
      },
      {
        "type": "assertion",
        "description": "Commands open MiniApp correctly and navigation works seamlessly"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Scalability and Multi-instance Session Management",
    "description": "Verify correct handling of multiple game rooms and users concurrently, with Redis session sharing and consistent state across instances.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Simulate multiple users creating and joining different game rooms concurrently across app instances"
      },
      {
        "type": "assertion",
        "description": "Each room maintains isolated state and all users receive correct real-time updates"
      },
      {
        "type": "action",
        "description": "Simulate failover or restart of one app instance connected to Redis"
      },
      {
        "type": "assertion",
        "description": "Sessions and game states persist without inconsistencies or user disconnections"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Error Handling and Timeout Management",
    "description": "Test backend error responses and proper timeout behavior under network failure or delayed inputs.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Simulate backend service failure or malformed requests to APIs"
      },
      {
        "type": "assertion",
        "description": "APIs return meaningful error codes and messages without crashing"
      },
      {
        "type": "action",
        "description": "Trigger network delays or dropped socket connections during game"
      },
      {
        "type": "assertion",
        "description": "App handles timeouts gracefully, reconnects, or prompts user appropriately"
      }
    ]
  }
]
