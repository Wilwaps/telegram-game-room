[
  {
    "id": "TC001",
    "title": "Create Public Game Room",
    "description": "Verify that a user can successfully create a public game room and it is listed correctly for other users to join.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open the MiniApp via Telegram bot"
      },
      {
        "type": "action",
        "description": "Navigate to create room section"
      },
      {
        "type": "action",
        "description": "Select option to create a public room"
      },
      {
        "type": "action",
        "description": "Submit creation with valid room details"
      },
      {
        "type": "assertion",
        "description": "Room is created successfully with generated room code"
      },
      {
        "type": "assertion",
        "description": "Room appears in the list of public rooms available for joining"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Create Private Game Room with Invitation Code",
    "description": "Ensure that a user can create a private room and invitation code is generated for sharing.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open MiniApp and access create room page"
      },
      {
        "type": "action",
        "description": "Choose private room creation"
      },
      {
        "type": "action",
        "description": "Submit room details and confirm creation"
      },
      {
        "type": "assertion",
        "description": "Room is created and marked private"
      },
      {
        "type": "assertion",
        "description": "Valid invitation code is generated and displayed"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Join Existing Room Using Room Code",
    "description": "Verify that users can join existing public or private rooms via valid room code or invitation.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open the MiniApp and navigate to join room screen"
      },
      {
        "type": "action",
        "description": "Enter a valid existing room code"
      },
      {
        "type": "action",
        "description": "Submit join request"
      },
      {
        "type": "assertion",
        "description": "User is successfully connected to the specified room"
      },
      {
        "type": "assertion",
        "description": "If room is private, join only succeeds with valid invitation"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Start and Synchronize Tic Tac Toe Game Session",
    "description": "Validate real-time gameplay using Socket.io where moves by players update instantly and correctly on all participants.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Create or join Tic Tac Toe game room with two players"
      },
      {
        "type": "action",
        "description": "Start the game session"
      },
      {
        "type": "action",
        "description": "Player 1 makes a move"
      },
      {
        "type": "assertion",
        "description": "Move appears instantly and correctly on Player 2's UI"
      },
      {
        "type": "action",
        "description": "Player 2 makes a move"
      },
      {
        "type": "assertion",
        "description": "Move appears instantly and correctly on Player 1's UI"
      },
      {
        "type": "action",
        "description": "Play through a full game to test game flow and completion"
      },
      {
        "type": "assertion",
        "description": "Game win/draw is detected and displayed correctly for both players"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Handle Host Leaving Game Room Gracefully",
    "description": "Confirm the system transfers host role correctly and the room continues without interruption if the host leaves.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Create a game room and start a game with multiple players"
      },
      {
        "type": "action",
        "description": "Host leaves the game mid-session"
      },
      {
        "type": "assertion",
        "description": "A new host is assigned successfully"
      },
      {
        "type": "assertion",
        "description": "Game session continues uninterrupted for other players"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Revancha Feature - Play Multiple Matches Without Reload",
    "description": "Test the 'revancha' functionality allowing players to start new matches instantly after finishing one without leaving the room.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Complete a Tic Tac Toe game in a room"
      },
      {
        "type": "action",
        "description": "Initiate a revancha match via UI or prompt"
      },
      {
        "type": "assertion",
        "description": "New game match starts immediately without page reload"
      },
      {
        "type": "action",
        "description": "Play several matches back to back"
      },
      {
        "type": "assertion",
        "description": "All matches are synchronized correctly and no errors occur"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Economy System - Accumulate and Transfer Fuegos",
    "description": "Verify accumulation, transfer and history tracking of the virtual currency 'Fuegos' between users and sponsors.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User participates in game and earns fuegos"
      },
      {
        "type": "assertion",
        "description": "User's fuegos balance increases accordingly"
      },
      {
        "type": "action",
        "description": "User transfers fuegos to another user"
      },
      {
        "type": "assertion",
        "description": "Transfer is reflected correctly in both users' balances and the transaction history"
      },
      {
        "type": "action",
        "description": "Sponsor transfers fuegos to user using sponsor key"
      },
      {
        "type": "assertion",
        "description": "Sponsor's transfer is validated and user balance updated"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Economy System - Admin Supply and Reserve Management",
    "description": "Test administrator capabilities to add fuegos from reserve, configure sponsors and supply thresholds.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Admin logs in with valid authorization"
      },
      {
        "type": "action",
        "description": "Add a new sponsor with initial fuegos amount"
      },
      {
        "type": "assertion",
        "description": "Sponsor is listed with correct details after addition"
      },
      {
        "type": "action",
        "description": "Grant fuegos from supply reserve to user"
      },
      {
        "type": "assertion",
        "description": "User's fuegos balance increments as expected"
      },
      {
        "type": "action",
        "description": "Remove sponsor and verify removal"
      },
      {
        "type": "assertion",
        "description": "Sponsor no longer appears in sponsors list"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Store API - Redeem Item Using Fuegos",
    "description": "Validate that users can redeem items from the catalog using their earned fuegos and handle insufficient balance errors.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Retrieve catalog of redeemable items"
      },
      {
        "type": "assertion",
        "description": "Catalog data is returned with correct item details and costs"
      },
      {
        "type": "action",
        "description": "User redeems an item with enough fuegos"
      },
      {
        "type": "assertion",
        "description": "Redeem operation completes successfully and fuegos balance is decremented"
      },
      {
        "type": "action",
        "description": "User attempts to redeem an item without sufficient fuegos"
      },
      {
        "type": "assertion",
        "description": "System returns an appropriate error or rejection message"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Profile Management - View and Update User Profile",
    "description": "Ensure users can retrieve their profile data and submit updates for fields like name, phone, and email.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "User requests their profile data by userId"
      },
      {
        "type": "assertion",
        "description": "Profile data is returned with valid information"
      },
      {
        "type": "action",
        "description": "User submits changes to profile's firstName, lastName, phone and email"
      },
      {
        "type": "assertion",
        "description": "Profile update succeeds and changes are persisted"
      },
      {
        "type": "action",
        "description": "User attempts to update profile with invalid email format"
      },
      {
        "type": "assertion",
        "description": "System rejects update with validation error"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Profile Management - Request Key Change",
    "description": "Verify that users can request a change of their key and system processes the request correctly.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "User submits a request to change their access key providing a new key and optional note"
      },
      {
        "type": "assertion",
        "description": "Request is accepted and stored for admin processing"
      },
      {
        "type": "action",
        "description": "User submits a request with missing newKey field"
      },
      {
        "type": "assertion",
        "description": "Request is rejected with appropriate validation error"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "XP API - Get and Set XP Thresholds",
    "description": "Test retrieval and configuration of XP thresholds by authorized users.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Make GET request to fetch current XP thresholds"
      },
      {
        "type": "assertion",
        "description": "XP thresholds are returned with expected values"
      },
      {
        "type": "action",
        "description": "Make POST request to update XP thresholds with new configuration"
      },
      {
        "type": "assertion",
        "description": "Configuration is saved and reflected in subsequent GET calls"
      },
      {
        "type": "action",
        "description": "Attempt to set thresholds with invalid data format"
      },
      {
        "type": "assertion",
        "description": "API rejects request with proper error response"
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Socket.io Connection - Handle Latency and Disconnection",
    "description": "Ensure the real-time WebSocket connections via Socket.io handle network latency and unexpected disconnects robustly.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Establish a Socket.io connection for a game session"
      },
      {
        "type": "action",
        "description": "Simulate intermittent network latency and delays"
      },
      {
        "type": "assertion",
        "description": "All game state updates remain synchronized without data loss"
      },
      {
        "type": "action",
        "description": "Simulate unexpected disconnection of one player"
      },
      {
        "type": "assertion",
        "description": "System handles disconnect gracefully, allowing rejoin or notifying others"
      }
    ]
  },
  {
    "id": "TC014",
    "title": "API Security - Authorization Validation on Admin Endpoints",
    "description": "Verify that admin-only APIs require authorization and reject unauthorized access attempts.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to access admin API endpoints (e.g. sponsor management) without credentials"
      },
      {
        "type": "assertion",
        "description": "API responds with 401 Unauthorized or similar error"
      },
      {
        "type": "action",
        "description": "Attempt APIs with invalid/expired tokens"
      },
      {
        "type": "assertion",
        "description": "Access is denied with proper error message"
      },
      {
        "type": "action",
        "description": "Use valid admin credentials to access endpoints"
      },
      {
        "type": "assertion",
        "description": "Endpoints respond successfully with expected data or action performed"
      }
    ]
  },
  {
    "id": "TC015",
    "title": "UI Responsiveness on Mobile and Desktop",
    "description": "Check that the frontend UI renders correctly and is fully functional across mobile and desktop devices within Telegram WebApp SDK.",
    "category": "ui",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open MiniApp in Telegram on mobile device"
      },
      {
        "type": "assertion",
        "description": "UI elements adapt correctly and all interactive components function"
      },
      {
        "type": "action",
        "description": "Open MiniApp in Telegram Desktop client"
      },
      {
        "type": "assertion",
        "description": "UI scales appropriately, no layout issues and functionality intact"
      }
    ]
  },
  {
    "id": "TC016",
    "title": "API Pagination and Filtering Validation",
    "description": "Validate that list APIs such as users with fuegos or supply transactions support pagination and filtering correctly.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Call the GET /api/economy/users with limit and cursor parameters"
      },
      {
        "type": "assertion",
        "description": "Response returns no more than specified limit and provides next cursor if applicable"
      },
      {
        "type": "action",
        "description": "Send a search query parameter along with the request"
      },
      {
        "type": "assertion",
        "description": "Response contains only filtered results matching the search term"
      }
    ]
  },
  {
    "id": "TC017",
    "title": "Logs Generation and Error Monitoring",
    "description": "Ensure that all operations log relevant information for operational and troubleshooting purposes without exposing sensitive data.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Perform gameplay events, economy transactions, and profile updates"
      },
      {
        "type": "assertion",
        "description": "System generates operational logs with correct event details"
      },
      {
        "type": "action",
        "description": "Force errors such as invalid inputs or unauthorized requests"
      },
      {
        "type": "assertion",
        "description": "Error logs are captured with error type and stack trace as appropriate"
      },
      {
        "type": "assertion",
        "description": "Logs do not leak sensitive information such as keys or passwords"
      }
    ]
  }
]
