[
  {
    "id": "TC001",
    "title": "Create public game room",
    "description": "Verify that a user can successfully create a public game room with proper initial settings.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open MiniApp from Telegram Bot menu"
      },
      {
        "type": "action",
        "description": "Select option to create a new public room"
      },
      {
        "type": "action",
        "description": "Provide required input (e.g. room name if any)"
      },
      {
        "type": "assertion",
        "description": "The room is created and visible to all users publicly"
      },
      {
        "type": "assertion",
        "description": "Host is assigned correctly to the creator"
      },
      {
        "type": "assertion",
        "description": "Room details appear correctly in UI"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Create private game room and invite users",
    "description": "Verify private room creation and the invitation flow via code and Telegram links.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Create a new private room in the MiniApp"
      },
      {
        "type": "assertion",
        "description": "Room code and invite link are generated"
      },
      {
        "type": "action",
        "description": "Use invite code to join from another user session"
      },
      {
        "type": "assertion",
        "description": "Invited user successfully joins the private room"
      },
      {
        "type": "action",
        "description": "Send invite link via Telegram message and accept invitation"
      },
      {
        "type": "assertion",
        "description": "User joins room via link correctly"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Host transfer in game room",
    "description": "Verify that the current host can transfer host role to another user in the room.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Create a room and join with two users"
      },
      {
        "type": "action",
        "description": "Current host selects option to transfer host to second user"
      },
      {
        "type": "assertion",
        "description": "Host role changes to specified user"
      },
      {
        "type": "assertion",
        "description": "New host has all host privileges"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Play Tic Tac Toe with real-time synchronization",
    "description": "Verify multiple users playing Tic Tac Toe experience real-time updates and game state synchronization.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Two users join the same room"
      },
      {
        "type": "action",
        "description": "User1 marks first cell in Tic Tac Toe board"
      },
      {
        "type": "assertion",
        "description": "User2 sees the updated move immediately via Socket.io"
      },
      {
        "type": "action",
        "description": "User2 marks cell in response"
      },
      {
        "type": "assertion",
        "description": "User1 sees User2's move synchronized"
      },
      {
        "type": "action",
        "description": "Play through a full game until win or draw"
      },
      {
        "type": "assertion",
        "description": "Game ends correctly showing win/draw status to both users"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Request rematch after game completion",
    "description": "Verify users can request and start a rematch with same players after game ends.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Finish a game in the room"
      },
      {
        "type": "action",
        "description": "Click on Rematch button"
      },
      {
        "type": "assertion",
        "description": "New game session starts with same users and board reset"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Economy system supply summary retrieval",
    "description": "Validate the Economy API returns correct supply summary data.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send HTTP GET request to /api/economy/supply"
      },
      {
        "type": "assertion",
        "description": "Response status is 200 OK with valid supply summary data"
      },
      {
        "type": "assertion",
        "description": "Supply data matches backend records"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Economy system supply transactions pagination",
    "description": "Verify supply transactions endpoint supports limit parameter and returns paginated data.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send HTTP GET request to /api/economy/supply/txs with limit=5"
      },
      {
        "type": "assertion",
        "description": "Response returns maximum 5 transaction records"
      },
      {
        "type": "action",
        "description": "Send request with invalid limit (e.g. negative value)"
      },
      {
        "type": "assertion",
        "description": "API returns proper error or fallback to default limit"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Real-time supply updates via SSE",
    "description": "Verify server-sent events stream for supply updates works and client receives updates in real-time.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open SSE connection to /api/economy/supply/stream"
      },
      {
        "type": "assertion",
        "description": "Connection established with correct headers and no errors"
      },
      {
        "type": "action",
        "description": "Trigger supply change in backend (simulate supply transaction)"
      },
      {
        "type": "assertion",
        "description": "Client receives supply change event with correct data"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Transfer Fuegos between users with validation",
    "description": "Test that sponsor can transfer virtual currency 'Fuegos' between users with proper authorization and validation.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send POST request to /api/economy/transfer with valid sponsorKey and amounts"
      },
      {
        "type": "assertion",
        "description": "Transfer succeeds and balances update accordingly"
      },
      {
        "type": "action",
        "description": "Send transfer with invalid sponsorKey"
      },
      {
        "type": "assertion",
        "description": "API rejects request with authorization error"
      },
      {
        "type": "action",
        "description": "Send transfer with amount exceeding balance"
      },
      {
        "type": "assertion",
        "description": "API rejects request with insufficient funds error"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Redeem store item with sufficient Fuegos",
    "description": "Verify user can redeem an item if they have enough Fuegos and the item exists in catalog.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Query /api/store/catalog for available items"
      },
      {
        "type": "assertion",
        "description": "Catalog returns list of items with correct details"
      },
      {
        "type": "action",
        "description": "Send POST to /api/store/redeem with valid userId and itemId where user has sufficient Fuegos"
      },
      {
        "type": "assertion",
        "description": "Redemption succeeds and user balance is decremented"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Redeem store item with insufficient Fuegos",
    "description": "Verify redemption fails gracefully when user does not have enough Fuegos.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send POST to /api/store/redeem with item cost exceeding user's Fuegos"
      },
      {
        "type": "assertion",
        "description": "API returns error indicating insufficient balance"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Get user profile and update information",
    "description": "Validate profile API returns correct user info and allows updates with valid parameters.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send GET request to /api/profile/{userId} to retrieve profile"
      },
      {
        "type": "assertion",
        "description": "Correct profile data is returned with no errors"
      },
      {
        "type": "action",
        "description": "Send POST request to /api/profile/{userId} with updated name, phone, and email"
      },
      {
        "type": "assertion",
        "description": "Profile is updated and GET returns new data"
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Request key change for user profile",
    "description": "Verify users can request key change with optional note and that request is accepted.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send POST request to /api/profile/{userId}/request-key-change with newKey and note"
      },
      {
        "type": "assertion",
        "description": "API returns success and request is logged"
      }
    ]
  },
  {
    "id": "TC014",
    "title": "XP thresholds retrieval and update",
    "description": "Validate XP API correctly handles retrieval and update of XP thresholds.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send GET request to /api/xp/config to retrieve current thresholds"
      },
      {
        "type": "assertion",
        "description": "Response returns thresholds in expected format"
      },
      {
        "type": "action",
        "description": "Send POST request to /api/xp/config with new threshold configuration"
      },
      {
        "type": "assertion",
        "description": "Thresholds update successfully and GET reflects changes"
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Telegram WebApp SDK integration and feedback",
    "description": "Verify MiniApp integrates with Telegram WebApp SDK to provide theme adaptation and feedback (vibration, animations).",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open MiniApp inside Telegram client"
      },
      {
        "type": "assertion",
        "description": "UI adapts to Telegram theme correctly"
      },
      {
        "type": "action",
        "description": "Perform actions that trigger haptic feedback"
      },
      {
        "type": "assertion",
        "description": "Device registers vibration or other haptic feedback"
      },
      {
        "type": "action",
        "description": "Verify animations render smoothly on various screen sizes"
      },
      {
        "type": "assertion",
        "description": "Animations do not cause UI glitches or lag"
      }
    ]
  },
  {
    "id": "TC016",
    "title": "Rate limiting and security for Economy API",
    "description": "Verify that the Economy API endpoints enforce rate limits and reject requests exceeding allowed limits.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send rapid successive requests exceeding rate limit to /api/economy/transfer"
      },
      {
        "type": "assertion",
        "description": "API responds with rate limit exceeded error after surpassing threshold"
      },
      {
        "type": "action",
        "description": "Send requests with invalid or malicious input data (SQL injections, script tags)"
      },
      {
        "type": "assertion",
        "description": "API sanitizes input and returns validation errors without server error or injection"
      }
    ]
  },
  {
    "id": "TC017",
    "title": "Multiple simultaneous game rooms scalability test",
    "description": "Validate system performance and stability with many simultaneous active game rooms and users connected.",
    "category": "performance",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Simulate creation of 100+ concurrent rooms each with multiple players"
      },
      {
        "type": "assertion",
        "description": "All socket connections remain stable and game states synchronize correctly without lag"
      },
      {
        "type": "assertion",
        "description": "CPU and memory usage within acceptable thresholds"
      }
    ]
  },
  {
    "id": "TC018",
    "title": "Error handling for invalid room join requests",
    "description": "Verify that attempts to join rooms with invalid or expired codes are handled gracefully.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to join a room with invalid or non-existent code"
      },
      {
        "type": "assertion",
        "description": "API and UI respond with user-friendly error message"
      },
      {
        "type": "action",
        "description": "Attempt to join a room that is at max capacity"
      },
      {
        "type": "assertion",
        "description": "Request is rejected appropriately with correct error"
      }
    ]
  },
  {
    "id": "TC019",
    "title": "Host permissions enforcement",
    "description": "Verify that only assigned hosts can perform actions reserved for hosts such as starting games and transferring host role.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Login as non-host user and attempt to start the game or transfer host"
      },
      {
        "type": "assertion",
        "description": "Actions are rejected and user is notified they lack permissions"
      }
    ]
  },
  {
    "id": "TC020",
    "title": "Logging and error monitoring under load",
    "description": "Validate logs capture meaningful events and errors during high load conditions to support troubleshooting.",
    "category": "performance",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Simulate high volume of user activity and API requests"
      },
      {
        "type": "assertion",
        "description": "Winston logs capture all critical events, errors, and warnings"
      },
      {
        "type": "assertion",
        "description": "No silent failures or unlogged exceptions occur"
      }
    ]
  }
]
