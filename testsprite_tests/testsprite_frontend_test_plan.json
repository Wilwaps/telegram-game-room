[
  {
    "id": "TC001",
    "title": "Create Public Room Successfully",
    "description": "Verify that a user can create a public game room with valid inputs and receives a room code.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User opens Sala de Juegos MiniApp in Telegram."
      },
      {
        "type": "action",
        "description": "User selects option to create a public room."
      },
      {
        "type": "action",
        "description": "User submits valid room creation data."
      },
      {
        "type": "assertion",
        "description": "Verify that a room code is generated and displayed."
      },
      {
        "type": "assertion",
        "description": "Verify that the room is listed as public and available to join."
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Create Private Room and Invite Friend",
    "description": "Verify private room creation and invitation mechanism works correctly using invite codes and Telegram links.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User creates a private game room."
      },
      {
        "type": "assertion",
        "description": "Verify private room code or link is generated."
      },
      {
        "type": "action",
        "description": "User sends invite code or Telegram invitation link to a friend."
      },
      {
        "type": "action",
        "description": "Friend opens the MiniApp and uses the invite code/link to join the private room."
      },
      {
        "type": "assertion",
        "description": "Verify friend successfully joins the private room."
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Real-time Gameplay Synchronization - Tic Tac Toe",
    "description": "Validate that moves during a Tic Tac Toe game are synchronized in real time for all players using Socket.io.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Two users join the same Tic Tac Toe game room."
      },
      {
        "type": "action",
        "description": "Player 1 makes a move in a valid position."
      },
      {
        "type": "assertion",
        "description": "Player 2's UI updates instantly to reflect Player 1's move."
      },
      {
        "type": "action",
        "description": "Player 2 makes a move."
      },
      {
        "type": "assertion",
        "description": "Player 1's UI updates instantly to reflect Player 2's move."
      },
      {
        "type": "action",
        "description": "Play continues until game conclusion."
      },
      {
        "type": "assertion",
        "description": "Verify correct game end state and notification for both players."
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Error Handling for Invalid Room Join Code",
    "description": "Check system properly rejects attempts to join a room with invalid or non-existent codes and displays appropriate error.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User inputs invalid or non-existent room join code."
      },
      {
        "type": "assertion",
        "description": "Confirm user receives a clear error message denying entry."
      },
      {
        "type": "assertion",
        "description": "Verify the user remains on the join screen without crashing."
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Host Transfer in Game Room",
    "description": "Validate that the host can transfer hosting rights to another user in the room and new host assumes control.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Host selects a participant to transfer host rights."
      },
      {
        "type": "action",
        "description": "Host confirms host transfer."
      },
      {
        "type": "assertion",
        "description": "Verify the selected participant receives host privileges."
      },
      {
        "type": "assertion",
        "description": "Verify the original host loses hosting privileges."
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Request Rematch After Game End",
    "description": "Ensure users can request and initiate a rematch after a game concludes and the rematch workflow completes successfully.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Game ends and users see final stats."
      },
      {
        "type": "action",
        "description": "One user requests a rematch."
      },
      {
        "type": "action",
        "description": "Other user receives and accepts rematch request."
      },
      {
        "type": "assertion",
        "description": "Verify new game instance starts with initial game state."
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Economy: Get Supply Summary API",
    "description": "Validate the Economy API endpoint that returns supply summary responds with correct data and status 200.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send GET request to /api/economy/supply."
      },
      {
        "type": "assertion",
        "description": "Assert HTTP status 200."
      },
      {
        "type": "assertion",
        "description": "Response includes current supply totals as expected."
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Economy: Transfer Fires with Valid Sponsor Key",
    "description": "Verify that a sponsor can transfer fires to another user when providing a valid sponsor key and valid transfer data.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Sponsor sends POST request to /api/economy/transfer with fromUserId, toUserId, amount, sponsorKey, and reason."
      },
      {
        "type": "assertion",
        "description": "Response status is 200 and transfer is recorded."
      },
      {
        "type": "assertion",
        "description": "Receiving user fires balance is updated correctly."
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Economy: Transfer Fires with Invalid Sponsor Key",
    "description": "Check that the transfer API rejects transfers with invalid or missing sponsor keys and returns appropriate error status.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send POST request to /api/economy/transfer with invalid or missing sponsorKey."
      },
      {
        "type": "assertion",
        "description": "Response status is 401 or 403 with authorization error."
      },
      {
        "type": "assertion",
        "description": "No transfer occurs in the backend."
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Store: Redeem Item with Sufficient Fires",
    "description": "Validate that a user can redeem an item from the store catalog when they have enough fires, and fires balance updates accordingly.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User queries /api/store/catalog and selects an item."
      },
      {
        "type": "action",
        "description": "User sends POST to /api/store/redeem with userId, itemId, and requestId."
      },
      {
        "type": "assertion",
        "description": "Response status is 200 confirming redemption."
      },
      {
        "type": "assertion",
        "description": "User's fires balance is decreased appropriately."
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Store: Redeem Item with Insufficient Fires",
    "description": "Ensure that redemption is rejected when the user does not have enough fires to redeem the item.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User attempts to redeem item costing more fires than user has."
      },
      {
        "type": "assertion",
        "description": "Response returns 400 or appropriate error code with message about insufficient fires."
      },
      {
        "type": "assertion",
        "description": "User's fires balance remains unchanged."
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Profile: Get and Update User Profile",
    "description": "Verify that a user profile can be retrieved and updated correctly via API.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send GET request to /api/profile/{userId} with valid userId."
      },
      {
        "type": "assertion",
        "description": "Response status 200 and returns user profile fields."
      },
      {
        "type": "action",
        "description": "Send POST request to /api/profile/{userId} updating firstName, lastName, phone, and email."
      },
      {
        "type": "assertion",
        "description": "Response status 200 confirms update."
      },
      {
        "type": "action",
        "description": "Send GET request again to verify updated fields."
      },
      {
        "type": "assertion",
        "description": "Profile data matches the updates sent."
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Profile: Request Key Change",
    "description": "Validate that users can request a key change via API and the request is accepted.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send POST request to /api/profile/{userId}/request-key-change with newKey and optional note."
      },
      {
        "type": "assertion",
        "description": "Response status 200 confirming request accepted."
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Security: Rate Limiting Enforcement on Economy Transfer Endpoint",
    "description": "Ensure that rapid repeated requests to the transfer endpoint are throttled according to rate limiting configuration.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send a high volume of rapid POST requests to /api/economy/transfer."
      },
      {
        "type": "assertion",
        "description": "Verify that after threshold, responses return HTTP 429 Too Many Requests."
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Real-Time Economy Updates via SSE",
    "description": "Verify that the supply SSE stream endpoint sends live updates correctly and clients receive consistent event data.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Client connects to /api/economy/supply/stream."
      },
      {
        "type": "assertion",
        "description": "Confirm SSE connection is established."
      },
      {
        "type": "action",
        "description": "Trigger an economy supply change (e.g. admin grants fires)."
      },
      {
        "type": "assertion",
        "description": "Client receives an SSE event with updated supply data."
      }
    ]
  },
  {
    "id": "TC016",
    "title": "UI Responsiveness Test on Different Screen Sizes",
    "description": "Guarantee the MiniApp UI adapts fluidly to various screen sizes including mobile and desktop Telegram WebApp environments.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open MiniApp in Telegram on multiple devices and screen sizes."
      },
      {
        "type": "assertion",
        "description": "Check UI elements and game board scale correctly with no horizontal scrolling or clipping."
      },
      {
        "type": "assertion",
        "description": "Verify animations and haptic feedback triggers correctly on supported devices."
      }
    ]
  },
  {
    "id": "TC017",
    "title": "Security: Validate Input Sanitization and Permissions on Room Join",
    "description": "Check that joining rooms via code correctly sanitizes inputs and rejects unauthorized or malformed requests.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to join room using room code with script or special characters."
      },
      {
        "type": "assertion",
        "description": "Request is rejected with an error indicating invalid input."
      },
      {
        "type": "action",
        "description": "Try to join private room without invitation or with an unauthorized user."
      },
      {
        "type": "assertion",
        "description": "Access is denied with an appropriate message about permissions."
      }
    ]
  },
  {
    "id": "TC018",
    "title": "Scalability: Manage Multiple Game Rooms Concurrently",
    "description": "Verify system supports multiple concurrent game rooms, with isolated states per room and consistent Redis session management.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Simulate creation of multiple game rooms by different users."
      },
      {
        "type": "action",
        "description": "Users join respective rooms and play games concurrently."
      },
      {
        "type": "assertion",
        "description": "Ensure game states do not interfere between rooms."
      },
      {
        "type": "assertion",
        "description": "Verify Redis holds session and game data correctly and isolation is maintained."
      }
    ]
  },
  {
    "id": "TC019",
    "title": "Backend Error Handling and Timeout Management",
    "description": "Ensure the backend handles unexpected errors gracefully with proper HTTP status codes and response messages, and enforces timeouts on long operations.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Simulate backend failure or delayed response on economy or game endpoints."
      },
      {
        "type": "assertion",
        "description": "Verify frontend receives appropriate error messages or timeout indications."
      },
      {
        "type": "assertion",
        "description": "Backend logs errors and does not crash."
      }
    ]
  }
]
